{"version":3,"file":"static/js/98.219d27fe.chunk.js","mappings":"uKACA,G,QAAmC,mCAAnC,EAA+E,yBAA/E,EAAsH,6BAAtH,EAA+L,0BAA/L,EAAuO,6B,oBCAvO,GAAgB,WAAa,+BAA+B,UAAY,+B,SCgBxE,EAXmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,gBAAKC,UAAWC,EAAAA,WAAhB,UACI,UAAC,KAAD,CAASC,GAAIJ,EAAb,WACI,gBAAKK,IAAKC,EAAMC,IAAI,OAAOL,UAAWC,EAAAA,aACtC,iBAAMD,UAAWC,EAAAA,KAAjB,SAA0BJ,EAAMS,aCXhD,EAAmC,kCAAnC,EAA+E,yBCW/E,EARe,SAACT,GACZ,OAAO,gBAAKG,UAAWC,EAAhB,UACH,gBAAKD,UAAWC,EAAhB,SACKJ,EAAMU,a,UCNnB,EAAuB,6BAAvB,EAA0D,4B,uCCMpDC,GAAeC,EAAAA,EAAAA,GAAiB,KAezBC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAbqC,SAACd,GACrE,OACI,kBAAMG,UAAWa,EAAYC,SAAUjB,EAAMkB,aAA7C,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXZ,KAAK,iBACLa,SAAU,CAACC,EAAAA,EAAUZ,GACrBa,YAAY,0BAEvB,mBAAQrB,UAAWa,EAAnB,gCCyBZ,EA/BgB,SAAChB,GAEb,IAAIyB,EAAiBzB,EAAM0B,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAuBpB,KAAMoB,EAAEpB,KAAMP,GAAI2B,EAAE3B,IAA1B2B,EAAE3B,OACvE4B,EAAmB9B,EAAM0B,YAAYK,SAASH,KAAK,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoBtB,QAASsB,EAAEtB,QAASR,GAAI8B,EAAE9B,IAAhC8B,EAAE9B,OAO5E,OACI,iBAAKC,UAAWC,EAAhB,WAEI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKqB,KAEL,gBAAKtB,UAAWC,EAAhB,UACI,yBAAM0B,UAId,gBAAK3B,UAAWC,EAAhB,UACI,SAAC6B,EAAA,EAAD,CAAOC,UAAW,EAAGC,GAAI,CAACC,QAAS,QAAnC,UACI,SAACvB,EAAD,CAAqBI,SAlBf,SAACoB,GACnBrC,EAAMsC,YAAYD,EAAOE,2B,8DCX3BC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCM3B,IAYA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAbkB,SAACJ,GACnB,MAAO,CACHf,YAAae,EAAMK,iBAGF,SAACC,GACtB,MAAO,CACHT,YAAa,SAACC,GACVQ,GAASC,EAAAA,EAAAA,GAAcT,UDV5B,SAA8BU,GASjC,OAD+BJ,EAAAA,EAAAA,IAAQL,EAARK,EAPL,SAAC7C,GAEvB,IAAK0C,EAAwB1C,EAAxB0C,OAAWQ,GAAhB,OAA6BlD,EAA7B,GAEA,OAAK0C,GACE,SAACO,GAAD,UAAeC,KADF,SAAC,KAAD,CAAU7C,GAAI,gBCS1C,CAGE8C,I","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/AddMessageForm/AddMessageForm.module.css?2bba","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContainer\":\"Dialogs_dialogsContainer__Q-Fha\",\"dialogs\":\"Dialogs_dialogs__t4I6y\",\"dialogsItem\":\"Dialogs_dialogsItem__HRLVB\",\"active\":\"Dialogs_active__aAZ4c\",\"messages\":\"Dialogs_messages__kCoQ-\",\"formMessage\":\"Dialogs_formMessage__6LoNz\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItem\":\"DialogItem_dialogItem__VcaDj\",\"userPhoto\":\"DialogItem_userPhoto__VAEUY\"};","import React from \"react\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {DialogType} from \"redux/DialogsReducer\"\r\nimport user from \"../../../assets/img/user.webp\"\r\nimport s from \"./DialogItem.module.css\"\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={s.dialogItem} >\r\n            <NavLink to={path} >\r\n                <img src={user} alt='user' className={s.userPhoto}/>\r\n                <span className={s.name}>{props.name}</span>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem","// extracted by mini-css-extract-plugin\nexport default {\"messageContainer\":\"Message_messageContainer__h+8Ok\",\"message\":\"Message_message__GmL1c\"};","import React from \"react\"\r\nimport {MessageType} from \"redux/DialogsReducer\"\r\nimport s from \"./Message.module.css\"\r\n\r\nconst Message =(props: MessageType) => {\r\n    return <div className={s.messageContainer}>\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AddMessageForm_form__y2bTO\",\"btn\":\"AddMessageForm_btn__LFHWq\"};","import React from \"react\"\r\nimport style from \"./AddMessageForm.module.css\"\r\nimport {maxLengthCreator, required} from \"utils/validators/validators\"\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport {Textarea} from \"components/Common/FormsControls/FormsControls\"\r\nimport {NewMessageFormType} from \"components/Dialogs/Dialogs\"\r\n\r\nconst maxLength250 = maxLengthCreator(250)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType>> = (props) => {\r\n    return (\r\n        <form className={style.form} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name='newMessageBody'\r\n                       validate={[required, maxLength250]}\r\n                       placeholder='Enter your message'/>\r\n            </div>\r\n            <button className={style.btn}>Send Message</button>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from \"react\"\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport Message from \"./Message/Message\"\r\nimport {DialogsPagePropsType} from \"./DialogsContainer\"\r\nimport Paper from '@mui/material/Paper'\r\nimport {AddMessageFormRedux} from \"components/Dialogs/AddMessageForm/AddMessageForm\"\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPagePropsType) => {\r\n\r\n    let dialogElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} />)\r\n    let messagesElements = props.dialogsPage.messages.map((m => <Message key={m.id} message={m.message} id={m.id}/>))\r\n\r\n\r\n    const addNewMessage = (values: NewMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogsContainer}>\r\n\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItem}>\r\n                    {dialogElements}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>{messagesElements}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.formMessage}>\r\n                <Paper elevation={3} sx={{padding: '10px'}}>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </Paper>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React, {ComponentType} from \"react\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {connect} from \"react-redux\"\r\nimport {AppStateType} from \"redux/reduxStore\"\r\n\r\ntype MapStatePropsType ={\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n}","import React from \"react\"\r\nimport {DialogReducerType, sendMessageAC} from \"redux/DialogsReducer\"\r\nimport Dialogs from \"./Dialogs\"\r\nimport {connect} from \"react-redux\"\r\nimport {AppStateType} from \"redux/reduxStore\"\r\nimport {compose, Dispatch} from \"redux\"\r\nimport {withAuthRedirect} from \"hoc/WithAuthRedirect\"\r\n\r\nexport type DialogsPagePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogReducerType\r\n}\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPages,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) : MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody ) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\nexport default compose <React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n"],"names":["props","path","id","className","s","to","src","user","alt","name","message","maxLength250","maxLengthCreator","AddMessageFormRedux","reduxForm","form","style","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","Paper","elevation","sx","padding","values","sendMessage","newMessageBody","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPages","dispatch","sendMessageAC","Component","restProps","Dialogs"],"sourceRoot":""}