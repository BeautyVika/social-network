{"version":3,"file":"static/js/689.e38f30ec.chunk.js","mappings":"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","sources":["components/Common/Paginator/Paginator.tsx","webpack://samurai-way/./src/components/Users/User/User.module.css?cfea","components/Users/User/User.tsx","webpack://samurai-way/./src/components/Users/Users.module.css?b9d0","components/Users/Users.tsx","redux/selectors/UsersSelectors.ts","components/Users/UsersContainer.tsx"],"sourcesContent":["import React, {FC, useEffect} from \"react\"\r\nimport TablePagination from \"@mui/material/TablePagination\"\r\n\r\ntype PaginatorPropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    onPageChanged: (pageNumber: number, pageSize?: number) => void\r\n}\r\n\r\nconst Paginator: FC<PaginatorPropsType> = ({currentPage, pageSize,totalUsersCount,onPageChanged}) => {\r\n\r\n    // let pagesCount = Math.ceil(props.totalUsersCount > 50 ? 900 : props.totalUsersCount) / props.pageSize\r\n    // let pages: Array<number> = []\r\n    // for (let i = 1; i <= pagesCount; i++) {\r\n    //     pages = [...pages, i]\r\n    // }\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(pageSize)\r\n\r\n    useEffect(() => {\r\n        if (pageSize === rowsPerPage) return\r\n        setRowsPerPage(pageSize)\r\n    }, [pageSize])\r\n\r\n    const handleChangeRowsPerPage = (\r\n        event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n    ) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        onPageChanged(1, parseInt(event.target.value, 10))\r\n    };\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => {\r\n        onPageChanged(page + 1, rowsPerPage)\r\n    };\r\n\r\n    return <TablePagination count={totalUsersCount}\r\n                            component=\"div\"\r\n                            labelRowsPerPage=\"Users per page:\"\r\n                            page={currentPage - 1}\r\n                            rowsPerPage={rowsPerPage}\r\n                            showFirstButton\r\n                            showLastButton\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                            onPageChange={handleChangePage}/>\r\n\r\n    // return <div>\r\n    //     {pages.map((page) => {\r\n    //         return <span className={props.currentPage === page ? s.selectedPage : ''}\r\n    //                      key={page}\r\n    //                      onClick={(e) => props.onPageChanged(page)}>\r\n    //                    {page}{' '}\r\n    //                </span>\r\n    //     })}\r\n    // </div>\r\n}\r\n\r\nexport default Paginator","// extracted by mini-css-extract-plugin\nexport default {\"userContainer\":\"User_userContainer__o27DI\",\"userPhoto\":\"User_userPhoto__hCubM\",\"userInfo\":\"User_userInfo__z0wUe\",\"nameUser\":\"User_nameUser__DHg6G\",\"statusUser\":\"User_statusUser__Y1oz3\"};","import React from 'react'\r\nimport s from \"./User.module.css\"\r\nimport userPhoto from \"../../../assets/img/user.webp\"\r\nimport {UsersType} from \"redux/UsersReducer\"\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\ntype UserPropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n}\r\n\r\nconst User = (props: UserPropsType) => {\r\n    let user = props.user\r\n    return (\r\n        <div className={s.userContainer}>\r\n                 <span>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img className={s.userPhoto} src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             alt='user photo'/>\r\n                    </NavLink>\r\n                </div>\r\n\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => props.unfollow(user.id)}>\r\n                            Unfollow</button>\r\n\r\n                        : <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                                  onClick={() => props.follow(user.id)}>\r\n                            Follow</button>\r\n                    }\r\n                </div>\r\n            </span>\r\n\r\n            <div className={s.userInfo}>\r\n                <div className={s.nameUser}> Name: {user.name}</div>\r\n                <div className={s.statusUser}> Status: {user.status}</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","// extracted by mini-css-extract-plugin\nexport default {\"usersContainer\":\"Users_usersContainer__6BH8S\",\"users\":\"Users_users__IxuJZ\"};","import React from 'react'\r\nimport {UsersType} from \"redux/UsersReducer\"\r\nimport Paginator from \"../Common/Paginator/Paginator\"\r\nimport User from \"./User/User\"\r\nimport s from \"./Users.module.css\"\r\n\r\ntype UsersPropsType = {\r\n    users: Array<UsersType>\r\n    follow: (id: number) => void\r\n    unfollow: (id: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    followingInProgress: Array<number>\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n    return (\r\n        <div className={s.usersContainer}>\r\n            <Paginator totalUsersCount={props.totalUsersCount}\r\n                       currentPage={props.currentPage}\r\n                       pageSize={props.pageSize}\r\n                       onPageChanged={props.onPageChanged}/>\r\n\r\n            <div className={s.users}>\r\n                {props.users.map(u => <User key={u.id}\r\n                                            user={u}\r\n                                            follow={props.follow}\r\n                                            followingInProgress={props.followingInProgress}\r\n                                            unfollow={props.unfollow}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import {AppStateType} from \"redux/reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector( getUsersSelector, (users) => {\r\n   return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUserCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const currentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const isFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const followingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React, {Component} from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport {AppStateType} from \"redux/reduxStore\"\r\nimport {\r\n    setCurrentPage,\r\n    requestUsers, follow, unfollow, UsersType, setPageSize,\r\n} from \"redux/UsersReducer\"\r\nimport Users from \"./Users\"\r\nimport Preloader from \"../Common/Preloader/Preloader\"\r\nimport {compose} from \"redux\"\r\nimport {\r\n    getUsers,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    currentPage,\r\n    isFetching,\r\n    followingInProgress\r\n} from \"redux/selectors/UsersSelectors\"\r\n\r\nexport type UsersPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setCurrentPage: (pageNumber: number) => void\r\n    setPageSize: (pageSize: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends Component <UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        const {requestUsers, currentPage, pageSize} = this.props\r\n        requestUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number, pageSize: number = 10) => {\r\n        this.props.requestUsers(pageNumber, pageSize)\r\n\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n\r\n            <Users totalUsersCount={this.props.totalUsersCount}\r\n                   onPageChanged={this.onPageChanged}\r\n                   currentPage={this.props.currentPage}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   pageSize={this.props.pageSize}\r\n                   followingInProgress={this.props.followingInProgress}/>\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUserCount(state),\r\n        currentPage: currentPage(state),\r\n        isFetching: isFetching(state),\r\n        followingInProgress: followingInProgress(state)\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {follow, unfollow, setCurrentPage, requestUsers, setPageSize})\r\n)(UsersContainer)\r\n"],"names":["currentPage","pageSize","totalUsersCount","onPageChanged","React","rowsPerPage","setRowsPerPage","useEffect","TablePagination","count","component","labelRowsPerPage","page","showFirstButton","showLastButton","onRowsPerPageChange","event","parseInt","target","value","onPageChange","props","user","className","s","to","id","src","photos","small","userPhoto","alt","followed","disabled","followingInProgress","some","onClick","unfollow","follow","name","status","users","map","u","getUsers","createSelector","state","usersPage","filter","getPageSize","getTotalUserCount","isFetching","UsersContainer","pageNumber","requestUsers","this","Preloader","Component","compose","connect","setCurrentPage","setPageSize"],"sourceRoot":""}